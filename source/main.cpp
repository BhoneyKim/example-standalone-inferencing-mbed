#include "mbed.h"
#include "ei_run_classifier.h"
#include "numpy.hpp"

static const float features[] = {
    0.3200, 3.6900, -5.4600, -3.6100, 4.7300, -2.7200, -7.4400, 4.9700, -0.7700, -8.9600, 4.4500, 0.0900, -10.3100, 4.4900, 1.1300, -10.3100, 4.4900, 1.1300, -15.5000, 5.6100, 3.5900, -19.8100, 6.0100, 6.4400, -19.9800, 5.6000, 8.2700, -19.9800, 3.9800, 9.4800, -19.9800, 2.7100, 9.9100, -19.9800, 0.9900, 9.4900, -19.9800, 0.9900, 9.4900, -19.9800, -0.5600, 8.8500, -19.9800, -1.1000, 8.6200, -19.8800, -0.6900, 8.2300, -17.6600, -1.1300, 5.9700, -16.8000, -0.9000, 5.9500, -16.7600, -0.0200, 6.2600, -16.7600, -0.0200, 6.2600, -14.1400, 0.6100, 4.8000, -10.2000, 0.2800, 2.4300, -8.4800, 1.2800, 2.2200, -7.8500, 2.1200, 2.0800, -6.6100, 2.6200, 0.4400, -3.9100, 1.6900, -3.0100, -3.9100, 1.6900, -3.0100, 0.1500, 0.6600, -5.3600, 3.3200, 1.0000, -5.5000, 6.2300, 0.4300, -6.1900, 8.9000, -1.1700, -7.1000, 10.5600, -1.7000, -5.9900, 12.9600, -2.4300, -5.5400, 12.9600, -2.4300, -5.5400, 18.0600, -4.6300, -7.2100, 19.9700, -7.2800, -8.3200, 19.9700, -6.5100, -5.9200, 19.9700, -5.5700, -3.6700, 19.9700, -6.7000, -3.7700, 19.9700, -8.5300, -5.3900, 19.9700, -8.5300, -5.3900, 19.9700, -8.4400, -5.8600, 18.6100, -6.8500, -4.8100, 14.9500, -4.9400, -3.4200, 12.0800, -3.5500, -2.2500, 10.4900, -3.7700, -3.2300, 8.4200, -3.9000, -4.3800, 8.4200, -3.9000, -4.3800, 5.2700, -2.1900, -3.6600, 2.2200, -0.5100, -1.6400, 1.3100, -0.1100, -0.9600, 2.2600, -1.2100, -1.5900, 0.7500, 0.6100, -1.2400, 0.7500, 0.6100, -1.2400, -1.5500, 2.5200, 1.2200, -2.0300, 1.9200, 0.6500, -4.5400, 0.0800, 0.2200, -7.1100, 0.5200, 0.9400, -10.6300, 1.5800, 2.0400, -18.0500, 4.0600, 5.5600, -18.0500, 4.0600, 5.5600, -19.9800, 6.1200, 10.9200, -19.9800, 4.6100, 13.2300, -19.9800, 0.9700, 12.6300, -19.9800, -1.3200, 11.2500, -19.9800, -2.8900, 9.3400, -19.9800, -3.3400, 8.7000, -19.9800, -3.3400, 8.7000, -19.9800, -2.3700, 8.2100, -18.9800, -2.7700, 6.7800, -15.0600, -3.7300, 4.7400, -15.3900, -2.1400, 5.6200, -15.2300, -0.7300, 5.3500, -12.3400, -0.7300, 3.3300, -12.3400, -0.7300, 3.3300, -8.7400, -0.7000, 0.3100, -6.8100, -0.4200, -0.1900, -6.0600, 1.1100, -0.4400, -4.3300, 2.0900, -0.7300, -1.5200, 1.5900, -2.5000, 0.5800, 1.1600, -4.4000, 0.5800, 1.1600, -4.4000, 1.9000, 2.2900, -4.2200, 8.1200, 2.3600, -7.4300, 11.2200, 0.1500, -6.7800, 12.5300, -0.6300, -6.8300, 16.6900, -1.3300, -5.7300, 19.9700, -3.4500, -7.0500, 19.9700, -3.4500, -7.0500, 19.9700, -6.9800, -9.3700, 19.9700, -7.8600, -8.3100, 19.9700, -6.3200, -6.0000, 19.9700, -5.9100, -5.5600, 19.9700, -7.3900, -6.4000, 19.1600, -6.3500, -5.7900, 19.1600, -6.3500, -5.7900, 15.0400, -5.2300, -4.7600, 12.0300, -5.0000, -4.6000, 10.3300, -5.2500, -4.3900, 9.0400, -4.4700, -4.9800, 6.1000, -3.2100, -4.5100, 2.2400, -2.1300, -3.1400, 2.2400, -2.1300, -3.1400, 0.9400, -1.4800, -2.3300, 1.2400, -1.3300, -2.4600, 0.0300, -0.1500, -1.3100, -2.7500, 0.9200, 0.8700, -4.7000, 0.3600, 1.2200, -5.4100, -1.4000, 1.0400, -5.4100, -1.4000, 1.0400, -6.6300, -0.9800, 1.6700, -10.6700, 0.8800, 4.1900, -14.3800, 0.6900, 5.8900, -15.6700, -1.5200, 6.5500, -17.2600, -2.6000, 7.6700, -17.2600, -2.6000, 7.6700, -18.8400, -2.4200, 8.3100, -19.9800, -2.5600, 9.1200, -19.9800, -3.3300, 9.8500, -19.9800, -4.6500, 8.4400, -19.9800, -5.1700, 7.7300, -19.9300, -4.5400, 7.8600, -19.9300, -4.5400, 7.8600, -18.8700, -4.2900, 7.0800, -17.7800, -3.7400, 5.9400
};

int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}

int main() {
    printf("Edge Impulse standalone inferencing (Mbed)\n");

    ei_impulse_result_t result = { 0 };

    // the features are stored into flash, and we don't want to load everything into RAM
    signal_t features_signal;
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
    features_signal.get_data = &raw_feature_get_data;

    // invoke the impulse
    EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, true);
    printf("run_classifier returned: %d\n", res);

    if (res != 0) return 1;

    printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
        result.timing.dsp, result.timing.classification, result.timing.anomaly);

    // print the predictions
    printf("[");
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
        printf("%.5f", result.classification[ix].value);
#if EI_CLASSIFIER_HAS_ANOMALY == 1
        printf(", ");
#else
        if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
            printf(", ");
        }
#endif
    }
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    printf("%.3f", result.anomaly);
#endif
    printf("]\n");
}
